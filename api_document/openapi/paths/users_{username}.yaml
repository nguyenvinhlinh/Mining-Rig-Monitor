parameters:
  - name: pretty_print
    in: query
    description: "Choose whether to pretty print the response. This option is **disabled** by default."
    schema:
      type: boolean
      default: false
get:
  tags:
    - User
  summary: Get user by name
  description: |
    Example description of the operation.
    You can use `markdown` **here**.
  operationId: getUserByName
  parameters:
    - name: username
      in: path
      description: "The username for which you want to retrieve the data."
      example: John78
      required: true
      schema:
        type: string
    - name: with_email
      in: query
      description: "Use this parameter to filter users without email. By default, only users with email are displayed."
      schema:
        type: boolean
        default: true
    - name: userid
      in: query
      description: "ID of the user. This is an example of a **deprecated** parameter."
      required: false
      deprecated: true
      schema:
        type: integer
        format: int64
  security:
    - main_auth:
        - read:users
    - api_key: []
  responses:
    '200':
      description: Success
      content:
        application/json:
          schema:
            $ref: '../components/schemas/User.yaml'
          example:
            username: 'user1'
            email: 'user@example.com'
    '403':
      description: Forbidden
      $ref: ../components/responses/Problem.yaml
    '404':
      description: User not found
      $ref: ../components/responses/Problem.yaml
put:
  tags:
    - User
  summary: Update user data
  description: "This operation allows users to update the information in their own profile. The update can only be performed by the logged in user."
  operationId: updateUser
  parameters:
    - name: username
      in: path
      description: "The name of the user profile to be **updated**."
      required: true
      schema:
        type: string
  security:
    - main_auth:
        - 'write:users'
  requestBody:
    content:
      application/json:
        schema:
          $ref: '../components/schemas/User.yaml'
      application/xml:
        schema:
          $ref: '../components/schemas/User.yaml'
    description: Updated user object
    required: true
  responses:
    '200':
      description: Successfully updated the user profile
      content:
        application/json:
          example:
            status: 200
            message: OK
    '400':
      description: Invalid username supplied
      $ref: ../components/responses/Problem.yaml
    '404':
      description: User not found
      $ref: ../components/responses/Problem.yaml
    '405':
      description: Method not allowed
      content:
        application/json:
          example:
            status: 405
            message: Not allowed
delete:
  tags:
    - Admin
  summary: Delete a user
  description: "This operation deletes all data associated with the requested `username`. Only administrators can perform this operation."
  operationId: deleteUser
  parameters:
    - name: api_key
      in: header
      required: false
      schema:
        type: string
        example: 'Bearer <TOKEN>'
    - name: username
      in: path
      description: "The name of the user profile to be **deleted**."
      example: John78
      required: true
      schema:
        type: string
  responses:
    '200':
      description: Successfully deleted a user
    '400':
      description: Invalid username provided
    '404':
      description: User not found
  security:
    - main_auth:
        - 'read:users'
        - 'write:users'
    - api_key: []
